scalar Date

type Location {
  countryCode: String
  townCity: String!
  openLocationCode: String
}

type ContactInfo {
  name: String!
  email: String
  phone: String
  signal: String
  whatsApp: String
}

input LocationInput {
  countryCode: String
  townCity: String!
  openLocationCode: String
}

input ContactInfoInput {
  name: String!
  email: String
  phone: String
  signal: String
  whatsApp: String
}

type Group {
  id: Int!
  name: String!
  groupType: GroupType!
  primaryLocation: Location!
  primaryContact: ContactInfo!
  website: String
  captainId: Int!

  createdAt: Date!
  updatedAt: Date!
}

input GroupCreateInput {
  name: String!
  groupType: GroupType!
  primaryLocation: LocationInput!
  primaryContact: ContactInfoInput!
  website: String
}

input GroupUpdateInput {
  name: String
  groupType: GroupType
  primaryLocation: LocationInput
  primaryContact: ContactInfoInput
  website: String
  captainId: Int
}

input ShipmentUpdateInput {
  shippingRoute: ShippingRoute
  labelYear: Int
  labelMonth: Int
  sendingHubId: Int
  receivingHubId: Int
  status: ShipmentStatus
}

type Query {
  group(id: Int!): Group!
  listGroups: [Group!]!

  shipment(id: Int!): Shipment!
  listShipments: [Shipment!]!

  offer(id: Int!): Offer!
  listOffers(shipmentId: Int!): [Offer!]!
}

type Mutation {
  addGroup(input: GroupCreateInput!): Group!
  updateGroup(id: Int!, input: GroupUpdateInput!): Group!

  addShipment(input: ShipmentCreateInput!): Shipment!
  updateShipment(id: Int!, input: ShipmentUpdateInput!): Shipment!

  addOffer(input: OfferCreateInput!): Offer!
  updateOffer(input: OfferUpdateInput!): Offer!

  addPallet(input: PalletCreateInput!): Pallet!
  updatePallet(input: PalletUpdateInput!): Pallet!
  destroyPallet(id: Int!): Offer! # return the destroyed pallet's offer
}

input ShipmentCreateInput {
  shippingRoute: ShippingRoute!
  labelYear: Int!
  labelMonth: Int!
  sendingHubId: Int!
  receivingHubId: Int!
  status: ShipmentStatus!
}

enum ShippingRoute {
  UK
}

enum ShipmentStatus {
  ANNOUNCED
  OPEN
  STAGING
  IN_PROGRESS
  COMPLETE
  ABANDONED
}

type Shipment {
  id: Int!
  shippingRoute: ShippingRoute!
  # label{year,month} are for identification purposes only e.g. for deriving
  # display names like "UK-2021-03".
  labelYear: Int!
  labelMonth: Int!
  offerSubmissionDeadline: Date
  status: ShipmentStatus!
  sendingHubId: Int!
  sendingHub: Group!
  receivingHubId: Int!
  receivingHub: Group!

  # default to created
  statusChangeTime: Date!
  createdAt: Date!
  updatedAt: Date!
}

enum GroupType {
  DA_HUB
  RECEIVING_GROUP
  SENDING_GROUP
}

type UserProfile {
  id: Int!
  isAdmin: Boolean!
}

enum OfferStatus {
  DRAFT
  PROPOSED
  BEING_REVIEWED
  REJECTED
  ACCEPTED
}

type Offer {
  id: Int!
  status: OfferStatus!
  shipmentId: Int!
  sendingGroupId: Int!

  # if null contact is group default
  contact: ContactInfo

  photoUris: [String!]!

  statusChangeTime: Date!
  updatedAt: Date!
  createdAt: Date!
}

input OfferCreateInput {
  sendingGroupId: Int!
  shipmentId: Int!
  contact: ContactInfoInput
  photoUris: [String!]
}

input OfferUpdateInput {
  id: Int!
  status: OfferStatus
  contact: ContactInfoInput
  photoUris: [String!]
}

enum PalletType {
  STANDARD
  EURO
  CUSTOM
}

enum PaymentStatus {
  WONT_PAY
  UNINITIATED
  INVOICED
  PAID
}

type Pallet {
  id: Int!
  offerId: Int!
  palletType: PalletType!
  paymentStatus: PaymentStatus!
  createdAt: Date!
  updatedAt: Date!
}

input PalletCreateInput {
  offerId: Int!
  palletType: PalletType!
}

input PalletUpdateInput {
  id: Int!
  paymentStatus: PaymentStatus
  palletType: PalletType
}
